// <auto-generated />
using System;
using BuildingCondition.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BuildingCondition.Db.Migrations
{
    [DbContext(typeof(BuildingConditionContext))]
    [Migration("20200406195717_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BuildingCondition.Db.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("GateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.ApartmentElectricalInstalationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ElectricalInstallationParametersMeterId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ElectricalInstallationParametersMeterId");

                    b.HasIndex("UserId");

                    b.ToTable("ApartmentElectricalInstalationReports");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.ApartmentGasInstalationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("AssessmentOfGasMeterAccuracy")
                        .HasColumnType("bit");

                    b.Property<bool>("BathroomStoveFittingsAccessibilityToTheShutoffValve")
                        .HasColumnType("bit");

                    b.Property<bool>("BathroomStoveFittingsOperationOfTheGasShutoffValve")
                        .HasColumnType("bit");

                    b.Property<bool>("BathroomStoveFittingsRoomVentilationWithGasReceiverVentilationGrille")
                        .HasColumnType("bit");

                    b.Property<bool>("BathroomStoveFittingsTechnicalConditionOfGasDevicesAndConnectionsToFlueGasDucts")
                        .HasColumnType("bit");

                    b.Property<bool>("BathroomStoveFittingsTheTightnessOfTheGasShutoffValve")
                        .HasColumnType("bit");

                    b.Property<string>("CommentsAndPostInspectionRecommendationsToBeMadeByTheApartmentUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentsAndPostInspectionRecommendationsToBeMadeByTheGasSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentsAndPostInspectionRecommendationsToBeMadeByTheManagerOrOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConditionOfAnticorrosiveCoating")
                        .HasColumnType("bit");

                    b.Property<bool>("ConditionOfPipeWallsAndFittings")
                        .HasColumnType("bit");

                    b.Property<bool>("CookerFittingsAccessibilityToTheShutoffValve")
                        .HasColumnType("bit");

                    b.Property<bool>("CookerFittingsOperationOfTheGasShutoffValve")
                        .HasColumnType("bit");

                    b.Property<bool>("CookerFittingsRoomVentilationWithGasReceiverVentilationGrille")
                        .HasColumnType("bit");

                    b.Property<bool>("CookerFittingsTechnicalConditionOfGasDevicesAndConnectionsToFlueGasDucts")
                        .HasColumnType("bit");

                    b.Property<bool>("CookerFittingsTheTightnessOfTheGasShutoffValve")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfInspection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfNextInspection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadlineForDeletion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FasteningGasInstallationsAndPipes")
                        .HasColumnType("bit");

                    b.Property<bool>("ForPremisesOrCollectiveOrSeal")
                        .HasColumnType("bit");

                    b.Property<bool>("FurtherOperationOfTheInstallationInThePremises")
                        .HasColumnType("bit");

                    b.Property<int>("GasDetectorId")
                        .HasColumnType("int");

                    b.Property<string>("GaseousFuelConcentration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InstallationTightness")
                        .HasColumnType("bit");

                    b.Property<bool>("IntersectionsOfGasInstallationsWithOtherPipes")
                        .HasColumnType("bit");

                    b.Property<bool>("KitchenStoveFittingsAccessibilityToTheShutoffValve")
                        .HasColumnType("bit");

                    b.Property<bool>("KitchenStoveFittingsOperationOfTheGasShutoffValve")
                        .HasColumnType("bit");

                    b.Property<bool>("KitchenStoveFittingsRoomVentilationWithGasReceiverVentilationGrille")
                        .HasColumnType("bit");

                    b.Property<bool>("KitchenStoveFittingsTechnicalConditionOfGasDevicesAndConnectionsToFlueGasDucts")
                        .HasColumnType("bit");

                    b.Property<bool>("KitchenStoveFittingsTheTightnessOfTheGasShutoffValve")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SecuringTheGasMeterAgainstUnauthorizedAccessAndAccessToTheGasMeter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShutOffTheGasSupply")
                        .HasColumnType("bit");

                    b.Property<string>("SignatureOfThePremisesUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TheGasMeterConnectionsWithTheInstallation")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VentilationOfTheGasMeterCabinet")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("GasDetectorId");

                    b.HasIndex("UserId");

                    b.ToTable("ApartmentGasInstalationReports");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingManagerId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingManagerId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.BuildingElectricalInstalationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("ElectricalInstallationParametersMeterId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ElectricalInstallationParametersMeterId");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingElectricalInstalationReports");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.BuildingGasInstalationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("GasDetectorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("GasDetectorId");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingGasInstalationReports");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.BuildingManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BuildingManagers");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.ElectricalInstallationParametersMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastCalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextCalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ElectricalInstallationParametersMeters");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.GasDetector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastCalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextCalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GasDetectors");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.QualificationCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QualificationCertificates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.Apartment", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.ApartmentElectricalInstalationReport", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.Apartment", "Apartment")
                        .WithMany("ApartmentElectricalInstalationReports")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.ElectricalInstallationParametersMeter", "ElectricalInstallationParametersMeter")
                        .WithMany("ApartmentElectricalInstalationReports")
                        .HasForeignKey("ElectricalInstallationParametersMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.User", "User")
                        .WithMany("ApartmentElectricalInstalationReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.ApartmentGasInstalationReport", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.Apartment", "Apartment")
                        .WithMany("ApartmentGasInstalationReports")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.GasDetector", "GasDetector")
                        .WithMany("ApartmentGasInstalationReports")
                        .HasForeignKey("GasDetectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.User", "User")
                        .WithMany("ApartmentGasInstalationReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.Building", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.BuildingManager", "BuildingManager")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.BuildingElectricalInstalationReport", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.Building", "Building")
                        .WithMany("BuildingElectricalInstalationReports")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.ElectricalInstallationParametersMeter", "ElectricalInstallationParametersMeter")
                        .WithMany("BuildingElectricalInstalationReports")
                        .HasForeignKey("ElectricalInstallationParametersMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.User", "User")
                        .WithMany("BuildingElectricalInstalationReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.BuildingGasInstalationReport", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.Building", "Building")
                        .WithMany("BuildingGasInstalationReports")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.GasDetector", "GasDetector")
                        .WithMany("BuildingGasInstalationReports")
                        .HasForeignKey("GasDetectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildingCondition.Db.Models.User", "User")
                        .WithMany("BuildingGasInstalationReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BuildingCondition.Db.Models.QualificationCertificate", b =>
                {
                    b.HasOne("BuildingCondition.Db.Models.User", "User")
                        .WithMany("QualificationCertificates")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
